// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"graphql-golang/graph/mypkg"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type Response interface {
	IsResponse()
}

// payload send when you add a student
type AddStudentInput struct {
	// name of the student (required)
	Name string `json:"name"`
	// email of the student (required)
	Email mypkg.Email `json:"email"`
}

// The `File` type, represents the response of uploading a file.
type File struct {
	Name    string `json:"name"`
	Size    int    `json:"size"`
	URL     string `json:"url"`
	Success bool   `json:"success"`
}

func (File) IsResponse() {}

// Response when you get a student
type GetStudentResponse struct {
	// if the request was successful or not, return always a value
	Success bool `json:"success"`
	// return the student if the request was successful
	Student *Student `json:"student"`
}

func (GetStudentResponse) IsResponse() {}

// Response when you get many students
type GetStudentsResponse struct {
	// if the request was successful or not, return always a value
	Success bool `json:"success"`
	// return an array of student if the request was successful or null if there is an error or no students
	Students []*Student `json:"students"`
}

func (GetStudentsResponse) IsResponse() {}

type JWTResponse struct {
	// jwt token for user to authenticate, contains user id, role and expiry
	AccessToken mypkg.JWT `json:"access_token"`
	// use to refresh the access token
	RefreshToken mypkg.JWT `json:"refresh_token"`
	// true if the user can connect or false if not
	Success bool `json:"success"`
}

type Message struct {
	ID      string `json:"id"`
	User    string `json:"user"`
	Content string `json:"content"`
}

type SigninInput struct {
	// email of the user
	Email mypkg.Email `json:"email"`
	// password of the user
	Password string `json:"password"`
}

type SignupInput struct {
	// email of the user
	Email mypkg.Email `json:"email"`
	// password of the user
	Password string `json:"password"`
	// confirm password of the user
	ConfirmPassword string `json:"confirm_password"`
	// name of the user
	Name string `json:"name"`
}

// All fields that represent a student
type Student struct {
	Name      string      `json:"name"`
	Email     mypkg.Email `json:"email"`
	ID        mypkg.UUID  `json:"id"`
	Role      UserType    `json:"role"`
	CreatedAt time.Time   `json:"created_at"`
	DeletedAt *time.Time  `json:"deleted_at"`
	UpdatedAt time.Time   `json:"updated_at"`
}

// payload send when you update a student
type UpdateStudentInput struct {
	// name of the student, change the name of the student or stay the same if not precised
	Name *string `json:"name"`
	// id of the student (mandatory)
	ID mypkg.UUID `json:"id"`
	// email of the student, change the email of the student or stay the same if not precised
	Email *mypkg.Email `json:"email"`
}

type UploadInput struct {
	// The file to upload
	File graphql.Upload `json:"file"`
	// width of the image if it needs to be resized
	Width *mypkg.PositiveInt `json:"width"`
	// height of the image if it needs to be resized
	Height *mypkg.PositiveInt `json:"height"`
}

type UserType string

const (
	// User can have access to all data
	UserTypeAdmin UserType = "ADMIN"
	// User can access specific data but not all
	UserTypePro UserType = "PRO"
	// User can only see their own data
	UserTypeUser UserType = "USER"
)

var AllUserType = []UserType{
	UserTypeAdmin,
	UserTypePro,
	UserTypeUser,
}

func (e UserType) IsValid() bool {
	switch e {
	case UserTypeAdmin, UserTypePro, UserTypeUser:
		return true
	}
	return false
}

func (e UserType) String() string {
	return string(e)
}

func (e *UserType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserType", str)
	}
	return nil
}

func (e UserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
