// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type User interface {
	IsUser()
}

type Competence struct {
	Name string `json:"name"`
}

type CompetenceInput struct {
	Name string `json:"name"`
}

type Student struct {
	Name        string        `json:"name"`
	ID          string        `json:"id"`
	Age         int           `json:"age"`
	Gpa         float64       `json:"gpa"`
	Passions    []string      `json:"passions"`
	IsPremium   bool          `json:"is_premium"`
	Role        UserType      `json:"role"`
	CreatedAt   time.Time     `json:"created_at"`
	UpdatedAt   time.Time     `json:"updated_at"`
	Competences []*Competence `json:"competences"`
}

func (Student) IsUser() {}

type StudentInput struct {
	Name      string     `json:"name"`
	ID        *string    `json:"id"`
	Age       int        `json:"age"`
	Gpa       float64    `json:"gpa"`
	Passions  []string   `json:"passions"`
	IsPremium *bool      `json:"is_premium"`
	Role      *UserType  `json:"role"`
	CreatedAt *time.Time `json:"created_at"`
	UpdatedAt *time.Time `json:"updated_at"`
}

type UserType string

const (
	UserTypeAdmin UserType = "ADMIN"
	UserTypePro   UserType = "PRO"
	UserTypeUser  UserType = "USER"
)

var AllUserType = []UserType{
	UserTypeAdmin,
	UserTypePro,
	UserTypeUser,
}

func (e UserType) IsValid() bool {
	switch e {
	case UserTypeAdmin, UserTypePro, UserTypeUser:
		return true
	}
	return false
}

func (e UserType) String() string {
	return string(e)
}

func (e *UserType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserType", str)
	}
	return nil
}

func (e UserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
