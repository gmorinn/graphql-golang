// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: auth.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkEmailExist = `-- name: CheckEmailExist :one
SELECT EXISTS(
    SELECT id, created_at, updated_at, deleted_at, email, password, name, role FROM students
    WHERE email = $1
    AND deleted_at IS NULL
)
`

func (q *Queries) CheckEmailExist(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkEmailExist, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const loginUser = `-- name: LoginUser :one
SELECT id, name, email, role FROM students
WHERE email = $1
AND password = crypt($2, password)
AND deleted_at IS NULL
`

type LoginUserParams struct {
	Email string `json:"email"`
	Crypt string `json:"crypt"`
}

type LoginUserRow struct {
	ID    uuid.UUID      `json:"id"`
	Name  sql.NullString `json:"name"`
	Email string         `json:"email"`
	Role  Role           `json:"role"`
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (LoginUserRow, error) {
	row := q.db.QueryRowContext(ctx, loginUser, arg.Email, arg.Crypt)
	var i LoginUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
	)
	return i, err
}

const signup = `-- name: Signup :one
INSERT INTO students (email, password, name) 
VALUES ($1, crypt($2, gen_salt('bf')), $3)
RETURNING id, created_at, updated_at, deleted_at, email, password, name, role
`

type SignupParams struct {
	Email string         `json:"email"`
	Crypt string         `json:"crypt"`
	Name  sql.NullString `json:"name"`
}

func (q *Queries) Signup(ctx context.Context, arg SignupParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, signup, arg.Email, arg.Crypt, arg.Name)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Role,
	)
	return i, err
}
