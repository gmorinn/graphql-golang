// Code generated by sqlc. DO NOT EDIT.
// source: students.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countStudent = `-- name: CountStudent :one
SELECT COUNT(*) FROM students
WHERE deleted_at IS NULL
`

func (q *Queries) CountStudent(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countStudent)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteStudentByID = `-- name: DeleteStudentByID :exec
UPDATE
    students
SET
    deleted_at = NOW()
WHERE 
    id = $1
`

func (q *Queries) DeleteStudentByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteStudentByID, id)
	return err
}

const getStudentByID = `-- name: GetStudentByID :one
SELECT id, created_at, updated_at, deleted_at, email, name, role FROM students
WHERE id = $1
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetStudentByID(ctx context.Context, id uuid.UUID) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentByID, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Name,
		&i.Role,
	)
	return i, err
}

const liststudents = `-- name: Liststudents :many
SELECT id, created_at, updated_at, deleted_at, email, name, role FROM students
WHERE deleted_at IS NULL
AND (name ILIKE $1 OR email ILIKE $1)
LIMIT 5
`

func (q *Queries) Liststudents(ctx context.Context, name sql.NullString) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, liststudents, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Student{}
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Email,
			&i.Name,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDescriptionStudent = `-- name: UpdateDescriptionStudent :exec
UPDATE students
SET name = $1,
    email = $2,
    updated_at = NOW()
WHERE id = $3
`

type UpdateDescriptionStudentParams struct {
	Name  sql.NullString `json:"name"`
	Email string         `json:"email"`
	ID    uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateDescriptionStudent(ctx context.Context, arg UpdateDescriptionStudentParams) error {
	_, err := q.db.ExecContext(ctx, updateDescriptionStudent, arg.Name, arg.Email, arg.ID)
	return err
}
