scalar Time
scalar Upload
scalar UUID
scalar Email
scalar URL
scalar JWT
# directive @hasRole(role: UserType!) on FIELD_DEFINITION
directive @jwtAuth on FIELD_DEFINITION



enum UserType {
  "User can have access to all data"
  ADMIN
  "User can access specific data but not all"
  PRO
  "User can only see their own data"
  USER
}


interface Response {
  success: Boolean!
}

"if there is an error, return it or null"
type ErrorResponse {
  err: String!
  error_code: String!
}

type Query {
  "returns one student by his id precising in the payload"
  student(id:UUID!): GetStudentResponse!
  "returns all students with a limit precising in the payload, need to be admin to access"
  students(limit: Int!, offset: Int!): GetStudentsResponse!

  protected: String! @jwtAuth
}

type Mutation {
  updateStudent(input: UpdateStudentInput!): GetStudentResponse!
  "connect a user to the application"
  signin(input: SigninInput!): JWTResponse!
  "create a new user"
  signup(input: SignupInput!): JWTResponse!
  "use to refresh the access token"
  refresh(refresh_token: JWT!): JWTResponse!
}

type JWTResponse {
  "jwt token for user to authenticate, contains user id, role and expiry"
  access_token: JWT!
  "use to refresh the access token"
  refresh_token: JWT!
  "true if the user can connect or false if not"
  success: Boolean!
}

input SigninInput {
  "email of the user"
  email: Email!
  "password of the user"
  password: String!
}

input SignupInput {
  "email of the user"
  email: Email!
  "password of the user"
  password: String!
  "confirm password of the user"
  confirm_password: String!
  "name of the user"
  name: String!
}

"All fields that represent a student"
type Student {
  name: String!
  email: Email!
  id: UUID!
  role: UserType!
  created_at: Time!
  deleted_at: Time
  updated_at: Time!
}

"Response when you get a student"
type GetStudentResponse implements Response {
  "if the request was successful or not, return always a value"
  success: Boolean!
  "return the student if the request was successful"
  student: Student
}

"Response when you get many students"
type GetStudentsResponse implements Response {
  "if the request was successful or not, return always a value"
  success: Boolean!
  "return an array of student if the request was successful or null if there is an error or no students"
  students: [Student]
}

"payload send when you add a student"
input AddStudentInput {
  "name of the student (required)"
  name: String!
  "email of the student (required)"
  email: Email!
}

"payload send when you update a student"
input UpdateStudentInput {
  "name of the student, change the name of the student or stay the same if not precised"
  name: String
  "id of the student (mandatory)"
  id: UUID!
  "email of the student, change the email of the student or stay the same if not precised"
  email: Email
}

