scalar Time
scalar Upload
scalar UUID
scalar Email
scalar URL
scalar JWT
# directive @hasRole(role: UserType!) on FIELD_DEFINITION

enum UserType {
  "User can have access to all data"
  ADMIN
  "User can access specific data but not all"
  PRO
  "User can only see their own data"
  USER
}


interface Response {
  success: Boolean!
}

"if there is an error, return it or null"
type ErrorResponse {
  err: String!
  error_code: String!
}

type Query {
  "returns one student by his id precising in the payload"
  student(id:UUID!): GetStudentResponse!
  "returns all students with a limit precising in the payload, need to be admin to access"
  students(limit: Int!): GetStudentsResponse!
}

type Mutation {
  addOrUpdateStudent(input: StudentInput!): GetStudentResponse!
}


"All fields that represent a student"
type Student {
  name: String
  email: Email!
  id: UUID!
  role: UserType!
  created_at: Time!
  deleted_at: Time
  updated_at: Time!
}

"Response when you get a student"
type GetStudentResponse implements Response {
  "if the request was successful or not, return always a value"
  success: Boolean!
  "return the student if the request was successful"
  student: Student
}

"Response when you get many students"
type GetStudentsResponse implements Response {
  "if the request was successful or not, return always a value"
  success: Boolean!
  "return an array of student if the request was successful or null if there is an error or no students"
  students: [Student]
}

input StudentInput {
  name: String
  id: UUID
  email: Email!
}
